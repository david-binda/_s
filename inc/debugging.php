<?php

class S_Debugging {

	private $first_action = -99999;

	private $last_action = 99999;

	private $current_action = null;

	public function __construct() {
		if ( true === $this->enabled() ) {

			// _s theme specific actions debug.
			add_action( '_s_before_get_template_part', array( $this, 'before_get_template_part' ), 10, 4 );
			add_action( '_s_after_get_template_part', array( $this, 'after_get_template_part' ), 10, 4 );
			add_action( '_s_template_not_loaded', array( $this, 'template_not_loaded' ), 10, 4 );

			// native WordPress actions/filters debug.
			add_action( 'get_header', array( $this, 'get_header' ), 10, 1 );
			add_action( 'get_footer', array( $this, 'get_footer' ), 10, 1 );
			add_filter( 'template_include', array( $this, 'template_include' ), $this->last_action, 1 );

			foreach( array( 'wp_head', 'wp_footer' ) as $action ) {
				add_action( $action, array( $this, 'action_start' ), $this->first_action, 0 );
				add_action( $action, array( $this, 'action_end' ), $this->last_action, 0 );
			}

			add_filter( 'document_title_parts', array( $this, 'document_title' ), $this->last_action, 1 );
			add_filter( 'pre_wp_nav_menu', array( $this, 'pre_wp_nav_menu' ), $this->first_action, 2 );
			add_filter( 'script_loader_tag', array( $this, 'script_loader_tag' ), $this->last_action, 3 );
			add_filter( 'style_loader_tag', array( $this, 'style_loader_tag' ), $this->last_action, 4 );
		}
	}

	private function enabled() {
		return ( true === isset( $_GET['debug'] ) && 'true' === $_GET['debug'] );
	}

	private function template_loaded( $located_template ) {
		return ( '' != $located_template );
	}

	private function log( $message, $newline = true, $echo = true ) {
		if ( true === $newline ) {
			echo PHP_EOL;
		}
		printf( '<!-- %s -->', esc_html( $message ) );
		if ( true === $newline ) {
			echo PHP_EOL;
		}
	}

	private function debug_loaded( $located_template, $before = true ) {
		$located_template = str_replace( ABSPATH, '', $located_template );
		if ( true === $before ) {
			$this->log( sprintf( 'Following code is located in %s', esc_html( $located_template ) ) );
		} else {
			$this->log( sprintf( 'End of code located in %s', esc_html( $located_template ) ) );
		}
	}

	private function debug_not_found( $slug, $name ) {
		$this->log( 'Requested template was not found. Slug: %s , name: %s .', esc_html( $slug ), esc_html( $name ) );
	}

	private function debug_action( $action, $before = true ) {
		if ( true === $before ) {
			$this->log( sprintf( 'Following code is generated by %s action', esc_html( $action ) ) );
		} else {
			$this->log( sprintf( 'End of code generated by %s action', esc_html( $action ) ) );
		}
	}

	public function before_get_template_part( $slug, $name, $templates, $located_template = null ) {
		if ( null !== $located_template && $this->template_loaded( $located_template ) ) {
			$this->debug_loaded( $located_template, true );
		}
	}

	public function after_get_template_part( $slug, $name, $templates, $located_template ) {
		if ( $this->template_loaded( $located_template ) ) {
			$this->debug_loaded( $located_template, false );
		}
	}

	public function template_not_loaded( $slug, $name, $templates, $located_template ) {
		$this->debug_not_found( $slug, $name );
	}

	public function get_header( $name ) {
		$templates = array();
		$name = (string) $name;
		if ( '' !== $name ) {
			$templates[] = "header-{$name}.php";
		}
		$templates[] = 'header.php';

		$located_template = locate_template( $templates, false );
		if ( true === $this->template_loaded( $located_template ) ) {
			$this->debug_loaded( $located_template, true );
		} else {
			$this->debug_not_found( $name );
		}
	}

	public function get_footer( $name ) {
		$templates = array();
		$name = (string) $name;
		if ( '' !== $name ) {
			$templates[] = "footer-{$name}.php";
		}
		$templates[] = 'footer.php';

		$located_template = locate_template( $templates, false );
		if ( true === $this->template_loaded( $located_template ) ) {
			$this->debug_loaded( $located_template, true );
		} else {
			$this->debug_not_found( $name );
		}
	}

	public function template_include( $template ) {
		$this->debug_loaded( $template, true );
		return $template;
	}

	public function action_start() {
		$this->current_action = current_filter();
		$this->debug_action( current_filter(), true );
	}

	public function action_end() {
		$this->current_action = null;
		$this->debug_action( current_filter(), false );
	}

	public function document_title( $title ) {
		if ( 'wp_head' === $this->current_action && false !== strpos( wp_debug_backtrace_summary(), '_wp_render_title_tag' ) ) {
			$this->log( sprintf( 'The title can be changed on %s', esc_url( admin_url( 'options-general.php' ) ) ), false );
		}
		return $title;
	}

	private function nav_menu_debug_message( $args ) {

		$registered_nav_menus = get_registered_nav_menus();

		// Get the nav menu based on the requested menu
		$menu = wp_get_nav_menu_object( $args->menu );

		$message =  sprintf( 'Following code shows items of navigation menu called %s', $args->menu );

		// Get the nav menu based on the theme_location
		if ( ! $menu && $args->theme_location && ( $locations = get_nav_menu_locations() ) && isset( $locations[ $args->theme_location ] ) ) {
			$menu = wp_get_nav_menu_object( $locations[ $args->theme_location ] );
			if ( isset( $registered_nav_menus[$args->theme_location] ) ) {
				$location = $registered_nav_menus[$args->theme_location];
			} else {
				$location = $locations[$args->theme_location];
			}
			$message = sprintf( 'Following code shows items of menu assigned to %s location', $location );

		}

		// get the first menu that has items if we still can't find a menu
		if ( ! $menu && !$args->theme_location ) {
			$menus = wp_get_nav_menus();
			foreach ( $menus as $menu_maybe ) {
				if ( $menu_items = wp_get_nav_menu_items( $menu_maybe->term_id, array( 'update_post_term_cache' => false ) ) ) {
					$menu = $menu_maybe;
					if ( true === isset( $location ) ) {
						$message = sprintf( 'Following code shows items of %s menu. To change the menu shown in there assign some menu to %s', $menu_maybe->name, $location );
					} else {
						$message = sprintf( 'Following code shows items of %s menu.', $menu_maybe->name );
					}
					unset( $location );
					break;
				}
			}
		}

		if ( empty( $args->menu ) ) {
			$args->menu = $menu;
		}

		// If the menu exists, get its items.
		if ( $menu && ! is_wp_error($menu) && !isset($menu_items) )
			$menu_items = wp_get_nav_menu_items( $menu->term_id, array( 'update_post_term_cache' => false ) );

		/*
		 * If no menu was found:
		 *  - Fall back (if one was specified), or bail.
		 *
		 * If no menu items were found:
		 *  - Fall back, but only if no theme location was specified.
		 *  - Otherwise, bail.
		 */
		if ( ( !$menu || is_wp_error($menu) || ( isset($menu_items) && empty($menu_items) && !$args->theme_location ) )
		     && isset( $args->fallback_cb ) && $args->fallback_cb && is_callable( $args->fallback_cb ) ) {

			if ( 'wp_page_menu' === $args->fallback_cb && true === isset( $location ) ) {
				$message = sprintf( 'Following code shows a list of all pages on this blog. If you want to display custom menu, navigate to %s and assign a menu to %s location.', esc_url( admin_url( 'nav-menus.php' ) ), $location );
			} else {
				$message = sprintf( 'Following code shows an output of a %s function which is used as a callback for wp_nav_menu all which failed finding suitabele nav menu.', $args->fallback_cb );
			}
		}

		return $message;
	}

	public function pre_wp_nav_menu( $nav_menu, $args ){
		$this->log( $this->nav_menu_debug_message( $args ) );
		return $nav_menu;
	}

	public function script_loader_tag( $tag, $handle, $src ) {
		// @todo: implement some useful logging
		return $tag; //. $this->log( 'Message', false, false );
	}

	public function style_loader_tag( $tag, $handle, $href, $media ) {
		// @todo: implement some useful logging
		return $tag; //. $this->log( 'Message', false, false ) .
	}
}

$debugging = new S_Debugging();